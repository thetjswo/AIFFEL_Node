/*
명명된 매개변수 선언 규칙
* 명명된 매개변수는 {}로 묶어서 선언한다.
* 여러 매개변수를 {}로 묶어 명명된 매개변수로 선언할 수 있다.
* 한 함수에서 명명된 매개변수는 한 번만 선언할 수 있으며 순서상 마지막에 선언해야 한다.
* 명명된 매개변수에는 기본값을 선언할 수 있다.
*/

/*********************[5-3-2/3]명명된 매개변수 선언/호출 규칙*********************/
// void some1({String? data2, bool? data3}, int data1) {} -> 명명된 매개변수는 순서 상 마지막에 와야 한다.
// void some2(int data1, {String? data2}, {bool? data3}) {} -> 명명된 매개변수는 한 함수에서 한 번만 선언할 수 있다.
// 규칙에 어긋나지 않은 명명된 매개변수 선언
void some3(int data1, {String? data2, bool? data3}) => print('data1: $data1, data2: $data2, data3: $data3');


/*********************[5-3-4]기본 인자 설정하기*********************/
// 명명된 매개변수의 타입에 ?를 붙이지 않는다면 매개변수 값이 전달되지 않을 경우에 대비하여 기본값을 지정해줘야 한다.
void some4({String data = 'default'}) => print('data: $data');

/*********************[5-3-5]필수 매개변수 선언하기*********************/
//명명된 매개변수에서 required 예약어는 반드시 값을 전달받도록 강제한다.
//TODO: 그럼 일반 매개변수를 쓰는 것과 required 예약어로 처리한 명명된 매개변수의 차이가 무엇일까?
//Insight. 매개변수의 이름을 지정하기 때문에 코드의 가독성이 높아지고, 매개변수 전달 순서를 고려하지 않아도 된다는 장점이 있다고 한다.
void some5({required int data}) => print('data: $data');


main() {
  /*
  명명된 매개변수 호출 규칙
  * 명명된 매개변수에 데이터를 전달하지 않을 수 있다.
  * 명명된 매개변수에 데이터를 전달하려면 반드시 이름을 명시해야 한다.
  * 명명된 매개변수에 데이터를 전달할 때 선언된 순서를 맞추지 않아도 된다.
  */

  print('*********************[5-3-2/3] 실습 코드 출력*********************');
  // some3() -> some3()함수에는 명명된 매개변수 이외에도 일반 매개변수가 있기 때문에 일반 매개변수는 전달을 해야한다.
  some3(10); //일반 매개변수에만 값을 전달하고 명명된 매개변수에는 값을 전달하지 않아도 된다.
  // some(10, 'hello', true) -> 명명된 매개변수에 값을 전달할 때에는 반드시 매개변수의 이름을 지정해야 한다.
  some3(10, data2: 'hello', data3: true); // 명명된 매개변수 호출 규칙 준수
  some3(10, data3: true, data2: 'hello'); // 명명된 매개변수의 선언 순서를 맞추지 않아도 된다.
  some3(data3: true, 10, data2: 'hello'); // 일반 매개변수의 순서 또한 맞추지 않아도 된다.
  print('\n');

  print('*********************[5-3-4] 실습 코드 출력*********************');
  // 명명된 매개변수 전달 X
  some4();
  // 명명된 매개변수 전달 O
  some4(data: 'Hello, World!');
  print('\n');

  print('*********************[5-3-5] 실습 코드 출력*********************');
  some5(data: 10); // 명명된 매개변수에 값을 필수로 넘겨준다.
  print('\n');
}